package dev.tomco.a23a_10357_l02;

import java.util.ArrayList;

public class GameManager {
    private boolean isLocked;

    private int[] flags = new int[]{
            0, 0, 0,
            0, 0, 0, 0, 0,
            0, 0, 0, 0, 0,
            0, 0, 0, 0, 0,
            0, 0, 0, 0, 0
    };




    private String[] names = new String[]{
            "מה מכל הבאים להלן הינו הדגמה של שיטת data driven?",
            "במסמך תכנון סבב בדיקות, מופיעה הפסקה הבאה: ''הבדיקות יערכו על סביבת פיתוח תוך שימוש בנתוני דמה אשר נחולל דרך סקריפט''. באיזו רמת בדיקות יבוצע סבב זה?",
            "מה מכל ההיגדים הבאים, תומך ב''פירמידת הבדיקות''?",
            "מה מכל הבאים, עשוי לקצר נתיב קריטי של שלב ''הערכה'' בתוך תהליך הבדיקות הבסיסי?",
            "אם האוטומציה מדווחת unable to locate element, מה לא יכולה להיות סיבה הגיונית לבעיה?",
            "בצענו 2 סבבים של בדיקות בצועים. התוצאות בסבב א' טובות משמעותית מהתוצאות שהודגמו בסבב ב'. מה יכולה להיות הסיבה לכך?",
            "מה מהבאים, יכול לגרור צורך להתמקד בבדיקות מ quadrant1 ?",
            "אילו מהעקרונות כאן, עשוי להדגים צורך בבדיקת שימושיות?",
            "באילו מהעדכונים להלן, ניתן לטעון בוודאות שיש להגדיל את מספר מקרי הבדיקה?",
            "מבין הבאים הצמדים הבאים, באיזה צמד המשימות אינן יכולות להתבצע במקביל?",
            "נתון האפיון הבא: עבור חישוב מחיר כרטיס כניסה לאטרקציה מסוימת, יש להזין את הקלטים הבאים: שכבת גיל (ילד, נוער, מבוגר), יום הביקור (חול, סופ''ש, חג), תושב (מקומי, תייר), כניסה (חד פעמי, כרטיסייה) כמה מקרי בדיקה נדרשים כאן כדי להגיע לכסוי מיטבי?",
            "הוחלט לשנות מצב של תקלה ל rejected. זה בהכרח אומר ש:",
            "מה מכל הבאים להלן הינו הדגמה של Page Object Model - POM ?",
            "במסמך תכנון סבב בדיקות, מופיעה הפסקה הבאה: ''הבדיקות יערכו על סביבה מקומית  התואמת לסביבת ה- Production תוך שימוש בנתוני אמת אשר התקבלו מהלקוח''. באיזו רמת בדיקות יבוצע סבב זה?",
            "מה מכל ההיגדים הבאים, מיישם נכון את עקרון ''test driven design''?",
            "מה מכל הבאים, מתאים לפעילות של product owner?",
            "באיזו רמת בדיקות ניתן להניח שיהיה שימוש בכלי postman?",
            "מה מהבאים עשוי להוביל לעליה בתקלות מסוג rejected?",
            "מה מהבאים, יכול לגרור צורך להתמקד בבדיקות מ quadrant2 ?",
            "אילו מהעקרונות כאן, עשוי להדגים צורך בשימוש במערכים אורתוגונליים?",
            "עבור חישוב מחיר כרטיס כניסה לאטרקציה מסוימת, יש להזין את הקלטים הבאים: שכבת גיל (ילד, נוער, מבוגר), יום הביקור (חול, סופ''ש, חג). באילו מהעדכונים להלן, לא יהיה שינוי במספר מקרי הבדיקה הנדרשים לכסוי מיטבי?",
            "מבין הצמדים הבאים, באיזה צמד המשימות יכולות להתבצע במקביל?",
            "הוחלט לשנות מצב של תקלה ל re-open. זה בהכרח אומר ש:",
    };
    private String[] ans1 = new String[]{
            "בדיקות פרו גרסיה המדווחות לקובץ log",
            "יחידה",
            "נשקיע מאמץ רב יותר בפיתוח, כך שנצמצם מאמץ בבדיקות",
            "לגייס יותר בודקים שיכתבו תנאי בדיקה",
            "גרסת הדפדפן התעדכנה",
            "בסבב א' מחולל העומסים מותקן על אותו מחשב עם השרת, ובסבב ב' לא",
            "עדכון הקוד כך שחלק מההדפסות ללוג יהיו ברמת פירוט debug ומעלה",
            "עדיפה תוכנה עובדת על פני תיעוד מפורט",
            "הממשק בין A לB התעדכן",
            "הרצת אוטומציה, דיווח תקלות",
            "81 מקרי בדיקה",
            "החומרה של התקלה סותרת העדיפות שלה ויש לעדכן זאת",
            "שימוש ב maven files",
            "יחידה",
            "נתחיל את הבדיקות בסבב ידני, כך שנצמצם מאמץ בבדיקות האוטומציה",
            "הגדרת קריטריון יציאה",
            "בדיקות אלפא",
            "התקנו את מחולל העומסים אותו מחשב עם השרת",
            "הקטנת גודל הcache",
            "בדיקות הינן תלויות הקשר",
            "הוחלט שמחירי הכרטיסים בימי חג יהיו זהים למחירי הכרטיסים בסופ''ש עבור תושבים מקומיים בלבד",
            "פרוגרסיה, רגרסיה",
            "בדיקת פרוגרסיה לאחר תיקון התקלה, נכשלה",
    };
    private String[] ans2 = new String[]{
            "בדיקות הנכתבות טרם פיתוח הקוד",
            "מערכת",
            "נשקיע מאמץ רב יותר בבדיקות ידניות , כך שנצמצם מאמץ בבדיקות אוטומטיות",
            "לאחד את משימות כתיבת אוטומציה ושימוש אוטומציה, למשימה אחת",
            "המערכת הנבדקת רצה לאט יותר מהאוטומציה",
            "בסבב א' השתמשנו ב proxy ובסבב ב' לא",
            "שנוי ברצף הפקדים במסך הבית עבור תהליכי רישום וכניסה",
            "עדיפה תגובה לשינויים על פני מעקב אחרי תכנית",
            "פונקציה A פוצלה לשתי פונקציות קטנות יותר שיעבדו כעת בטור A1->A2->B",
            "כתיבת תנאי בדיקה, עדכון severity",
            "36 מקרי בדיקה",
            "היה עדכון בדרישות ומקרה הבדיקה שהורץ אינו רלבנטי",
            "קריאת ערכים מתוך קבצים חיצוניים",
            "מערכת",
            "נגדיר בדיקות טרם יחל שלב קידוד",
            "הגדרת תנאי בדיקה",
            "בדיקות קופסא לבנה",
            "הנסיינים היו חשופים לדעות של נסיינים אחרים במהלך הבדיקה",
            "עדכון בבדיקות הרגרסיה",
            "בדיקות מתישות אינן ישימות",
            "קטגוריות שכבת הגיל צומצמה מ3- קטגוריות ל2- קטגוריות בלבד (ילד ומבוגר) ונוספה הבחנה בין תושב מקומי לתייר",
            "Str, חלוקה למנות בדיקה",
            "בדיקת רגרסיה לאחר תיקון התקלה, נכשלה",
    };
    private String[] ans3 = new String[]{
            "הרצה חוזרת של בדיקות רגרסיה עם ערכי קלט שונים",
            "פונקציונלית",
            "נשקיע מאמץ רב יותר בבדיקות מערכת, כך שנצמצם מאמץ בבדיקות אינטגרציה",
            "להקים סביבת ci",
            "המערכת הנבדקת מכילה frame",
            "בסבב א' המרווח בין הבקשות שהגיעו לשרת היה רנדומלי ובסבב ב' לא",
            "עדכון באלגוריתם אשר סורק את הנתונים ומציע אופטימיזציה",
            "פאראדוקס מדביר החרקים",
            "התדירות שבה פונקציה A מפעילה את B, גדלה",
            "אכלוס בסיס נתונים, הגדרת test set",
            "27 מקרי בדיקה",
            "הלקוח החליט לתעדף את התקלה בעדיפות נמוכה יותר",
            "הפרדה בין locators לבין assertions",
            "ידנית",
            "נשקיע מאמץ רב יותר בבדיקות אוטומטיות, כך שנצמצם מאמץ בבדיקות ידניות",
            "קביעת חומרה של תקלות",
            "בדיקות אינטגרציה",
            "הלקוח תעדף את הבדיקות מחדש",
            "כתיבת מודול חישובי מחדש לטובת צמצום CC",
            "נעדיף אנשים ויחסי גומלין על פני שימוש בכלים",
            "הוחלט שילדים ונוער ישלמו מחיר זהה בסופי שבוע, וקשישים (מבוגרים מעל גיל 65) יקבלו הנחה מיוחדת בחגים",
            "קביעת תוצאה רצויה, עדכון priority",
            "בדיקת אימות לאחר תיקון התקלה, נכשלה",
    };
    private String[] ans4 = new String[]{
            "בדיקות שאילתות בכסוי תנאים מורכבים",
            "קופסא לבנה",
            "נשקיע מאמץ רב יותר בבדיקות יחידה, כך שנצמצם מאמץ בבדיקות מערכת",
            "להריץ בדיקות בטור, ללא הפסקה",
            "המערכת הנבדקת עדכנה את האלמנטים אצלה",
            "בסבב א' היה דיווח מלא ללוג ובסבב ב' לא",
            "קצור זמן ה timeout במודול ההרשמה",
            "שיקריות היעדר השגיאות",
            "פונקציה A מפעילה את פונקציה B רק במקרים בהם פונקציה A מקבלת טריגר מפונקציה Z",
            "פירוק פונקציונלי, ניהול סיכונים",
            "9 מקרי בדיקה",
            "לא ניתן להוכיח שיש תקלה- הבעיה לא משתחזרת בסביבת הפיתוח",
            "הפעלת מקרי בדיקה מקלאסים שונים בהרצה אחת",
            "קופסא שחורה",
            "נתכנן את האוטומציה טרם יחל שלב ניתוח הדרישות",
            "תיעדוף מקרי בדיקה",
            "בדיקות ביצועים",
            "השימושיות של המערכת אינה מיטבית",
            "כשלון בבדיקת שפיות",
            "עדיפות לגילוי מקדם",
            "הוחלט שבסופי שבוע ילדים יכנסו בחינם, ובחגים נוער יקבל הנחה של 10%",
            "הגדרת קריטריון יציאה, הגדרת sanity",
            "לא ניתן לבדוק- הבעיה לא משתחזרת בסביבת הפיתוח",
    };

    private int[] answers = new int[]{
            3,
            1,
            4,
            3,
            1,
            2,
            3,
            4,
            4,
            2,
            4,
            2,
            3,
            2,
            2,
            2,
            3,
            4,
            4,
            2,
            4,
            1,
            3,
    };
    private int[] scores = new int[]{
            10, 10, 10, 10,
            20, 20, 20, 20,
            30, 30, 30, 30,
            10, 10, 10, 10,
            20, 20, 20, 20,
            30, 30, 30,
    };
    private String[] descriptions = new String[] {
            "sem1_y_2022_1",
            "sem1_y_2022_2",
            "sem1_y_2022_3",
            "sem1_y_2022_4",
            "sem1_y_2022_5",
            "sem1_y_2022_6",
            "sem1_y_2022_7",
            "sem1_y_2022_8",
            "sem1_y_2022_9",
            "sem1_y_2022_10",
            "sem1_y_2022_11",
            "sem1_y_2022_12",
            "sem1_y_2022_13",
            "sem1_y_2022_14",

            "sem1_y_2022_16",
            "sem1_y_2022_17",
            "sem1_y_2022_18",
            "sem1_y_2022_19",
            "sem1_y_2022_20",
            "sem1_y_2022_21",
            "sem1_y_2022_22",
            "sem1_y_2022_23",
            "sem1_y_2022_24",

            "sem1_1_2022_1",
            "sem1_1_2022_2",
            "sem1_1_2022_3",
            "sem1_1_2022_4",
            "sem1_1_2022_5",
            "sem1_1_2022_6",
    };

    private int score = 0;
    private int index = 0;
    private int wrong = 0;
    private int life;

    private ArrayList<Question> questions;

    public GameManager(int life) {
        this.life = life;
        this.isLocked = false;
        questions = new ArrayList<>();
        for (int i = 0; i < names.length; i++) {
            Question c = new Question()
                    .setQuestion(names[i])
                    .setScore(scores[i])
                    .setImage(flags[i])
                    .setCorrect(answers[i])
                    .setAns1(ans1[i]).setAns2(ans2[i]).setAns3(ans3[i]).setAns4(ans4[i])
                    .setDescription(descriptions[i]);

            questions.add(c);
        }

    }

    public void lock(){
        this.isLocked = true;
    }
    public void unlock(){
        this.isLocked = false;
    }

    public boolean isLocked(){return this.isLocked;}

    public int getScore() {
        return score;
    }

    public int getCurrentFlag() {
        return flags[index];
    }

    public String getCurrentName() {
        return names[index];
    }

    public int getWrong() {
        return wrong;
    }

    public boolean isGameEnded(){
        return index >= flags.length;
    }

    public boolean isLose(){
        return life == wrong;
    }

    public int checkAnswer(int answer){
        int correct = answers[index];
        if (correct == answer)
            score += scores[index];
        else
            wrong++;

        index++;
        return correct;
    }

    public String getAnswer1() {
        return ans1[index];
    }


    public String getAnswer2() {
        return ans2[index];
    }

    public String getAnswer3() {
        return ans3[index];
    }

    public String getAnswer4() {
        return ans4[index];
    }
}
