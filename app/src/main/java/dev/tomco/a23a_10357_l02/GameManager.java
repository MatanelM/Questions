package dev.tomco.a23a_10357_l02;

import java.util.ArrayList;

public class GameManager {
    private boolean isLocked;

    private int[] flags = new int[]{
            0,0,
            0,0,
            0,0,
            0,0,
            0,0,
            0,0,
            0,0,
            0,0,
            0,0,

    };
    private String[] names = new String[]{
            "צוות הבדיקות מצא שיש בעיה המרה בין המטבעות ש''ח ורופי ודיווח תקלה בהתאם. בגרסא הבאה הוחלט שלא לאפשר להציג מחירים ברופי אלא לחכות עם יכולת זו עד לשנה הבאה. מה יקרה לדיווח התקלה במקרה זה?",
            "אנחנו עובדים בגישת scrum. במהלך תכנון ה Sprint הנוכחי, הערכנו שאם נחווה תקלת רגרסיה באחד המודולים- משך הזמן החזוי לתיקונה יגלוש מעבר למועד השחרור הרצוי. מה עושים ?",
            "מה מכל המדדים הבאים, הינו המתאים ביותר בכדי להעריך התקדמות שלב יישום בתהליך הבדיקות הבסיסי?",
            "''מסך הכניסה למערכת מבקש שם משתמש וססמה בת 4 ספרות. לעומת זאת, מסך רישום משתמשים חדשים למערכת מבקש שם משתמש וססמה בת 6 ספרות''",
            "''בישיבת צוות, מדווחים שבדיקות היחידה עברו בהצלחה ולמעשה הסתיימו טרם הזמן המתוכנן.'' מה כדאי לעשות, במקרה כזה?",
            "מהו הקשר בין בדיקת רגרסייה לבדיקת אינטגרציה?",
            "''גילינו, שכשמודול החישוב בשרת מחשב את סך הסכום לתשלום, הוא כותב בLog שהוא מפעיל את מודול אלגוריתם A, אך בפועל הוא דווקא מפעיל את מודול אלגוריתם B''. באיזו רמת בדיקות, סביר להניח שדבר זה התגלה?",
            "נתון הקוד הבא: Read A; B=2*A+1 While ((A+B)>7) { If ((A+B)>8 then A--; Else B++; {",
            "בעת סיכום פרויקט הבדיקות, הוצאנו סטטיסטיקה על קצב סגירת התקלות במהלך הרצת הבדיקות וגילנו שהקצב ירד לקראת סיום הפרוייקט במקום לעלות, למרות שלא היה שינוי במספר העובדים על הפרוייקט. מה יכולה להיות סיבה הגיונית לכך?",
            "צוות הבדיקות מצא שיש בעיה המרה בין המטבעות ש''ח ורופי ודיווח תקלה בהתאם. בגרסא הבאה הסתבר שהבעיה אכן טופלה אך כעת ההמרה בין הליש''ט והדולר הינה בעייתית. מה יקרה לדיווח התקלה במקרה זה?",
            "''לאור שינוי בחוקי משרד הבריאות, יש מעתה לציין על כל אריזת תרופה בנוסף לתאריך התפוגה שלה, גם את מספר אצוות הייצור שלה. לשם כך, עלינו להוסיף לבסיס הנתונים של התרופות גם את מספרי אצוות הייצור''. איזו פעולה חשוב לבצע, במידה ומדובר במערכת שכבר מותקנת מזה זמן אצל הלקוחות?",
            "''מצאנו, שהמסך של התוכנה שלנו חתוך מעט כאשר מופעל דרך המסופונים שמותקנים ברכבים של הלקוחות''. באיזה מהבאים להלן, סביר להניח שבעיה זו התגלתה לראשונה?",
            "להלן רשימת בדיקות: א. בדיקה שהתרגום של מסך הרכישות לשפה הצרפתית- נכון ב. בדיקה שמשתמשים שפתחו חשבון בגרסה הישנה של התכנה- יכולים לגשת אליו גם בגרסה החדשה ג. בדיקה שמי ששלח מייל דרך המכשיר הנייד, יכול לראות את ההודעה דרך המחשב- ולהפך ד. בדיקה שהמערכת עובדת על סביבת העבודה של הלקוח",
            "להלן רשימת מטלות:א. ישיבת צוות בה כל חבר צוות מספק הערכה למאמץ העבודה הנדרש poker planning ממנו ב. חתימת חוזה עם הלקוח על כל הדרישות שלו מהמערכת שנפתח עבורו ג. הכנת תכנית עבודה מפורטת לתקופת הבדיקות ד. הערכת סיכונים כתנאי למעבר לשלב הבא",
            "נתון הקוד הבא: Read a; If (a>5) then While (a>8) do a--; Print a;",
            "מה מכל הבאים, עשוי לתרום לתחזוקתיות טובה של תוכנה?",
            "מהבאים להלן, מי מהם הינו בעית נגישות?",
            "''בישיבת צוות, מדווחים שבגרסא זו נתגלו יותר תקלות במודול ''חישוב סך תשלום'' מאשר בבדיקות שהיו בגרסא הקודמת .'' מה כדאי לעשות, במקרה כזה?",
    };
    private String[] ans1 = new String[]{
            "תעבור ל deferred",
            "הproduct owner מתיעץ עם הלקוח לגבי מועד שחרור חדש",
            "סך מקרי הבדיקה אשר מכסים את תנאי הבדיקה שהוגדרו מבעוד מועד",
            "זו בעית שימושיות שהתגלתה בבדיקת פרוגרסיה",
            "לנצל את הזמן הנותר ולהרחיב מעט את בדיקות היחידה, לפי עקרון ''שקריות היעדר השגיאות''",
            "יש לבצע בדיקת רגרסייה טרם בדיקת אינטגרציה",
            "בבדיקות שפיות",
            "ניתן לקיים כסוי הצהרות מלא עבור ערך יחיד של A, אך לא כיסוי החלטות",
            "מנות הבדיקה לא אורגנו מספיק טוב",
            "התקלה תחזור לפיתוח, החומרה תעלה",
            "בדיקות פרוגסיה ואימות",
            "במהלך בדיקות תחזוקה",
            "א' הינו בדיקת נגישות, ב' הינו בדיקת מערכת, ג' הינו בדיקת אינטגרציה, ד' הינו בדיקת מסירה",
            "א' +ד' הינם פיתוח סדרתי. ב'+ד' הינם פיתוח בסבבים",
            "הערך 6=a יתן כסוי החלטות מלא וכסוי הצהרות חלקי",
            "הערכת השפעה שתבוצע טרם העיצוב",
            "לא ניתן לבצע login בשפה שאיננה אנגלית",
            "לבצע בדיקות פרוגרסיה מקיפות על המודולים האחרים בתוכנה, לפי עקרון ''שקריות היעדר השגיאות''",
    };
    private String[] ans2 = new String[]{
            "תעבור ל reject",
            "הצוות מחזיר את המודול ל product backlog",
            "סך רשומת ה- db אשר עברו המרה לבסיס הנתונים החדש",
            "זו בעית אמינות שהתגלתה בבדיקת רגרסייה",
            "להוסיף את הזמן שנחסך לבדיקות המערכת, לפי עקרון ''בדיקות מראות רק אחוז מסוים מהתקלות''",
            "יש לבצע בדיקת אינטגרציה טרם בדיקת רגרסייה",
            "בבדיקות קופסא אפורה",
            "ניתן לקיים כסוי החלטות מלא עבור ערך יחיד של A, אך לא כיסוי הצהרות",
            "נתגלו יותר תקלות רגרסיה לקראת הסיום",
            "תפתח תקלה חדשה בחומרה גבוהה יותר מהקודמת",
            "הערכת השפעה ורגרסיה",
            "במהלך בדיקות שימושיות",
            "א' הינו בדיקת יחידה, ב' הינו בדיקת רגרסייה, ג' הינו בדיקת אינטגרציה, ד' הינו בדיקת קבלה",
            "א' +ב' הינם פיתוח בסבבים. ג'+ד' הינם פיתוח סדרתי",
            "הערך 9=a יתן כסוי החלטות חלקי וכסוי הצהרות חלקי",
            "עקיבות שתמומש יחד עם הקידוד",
            "המערכת ננעלת אחרי 3 נסיונות כניסה לא מוצלחים- ולא ניתן לשחררה בלי restart",
            "לבצע בדיקות מקיפות על כל המודולים בתכנה, לפי עקרון ''בדיקות מראות רק אחוז מסוים מהתקלות''",
    };
    private String[] ans3 = new String[]{
            "החומרה תרד",
            "הצוות מבצעים תזמון מחדש תוך עדכון הלקוח",
            "סך התקלות שנותרו פתוחות לאחר סבב התיקונים האחרון",
            "זו בעיה לא פונקציונלית, שהתגלתה בבדיקת יחידה",
            "לנצל את הזמן הפנוי ולהריץ מעט בדיקות קבלה, לפי עקרון ''פאראדוקס מדביר החרקים''",
            "יש לבצע בדיקת רגרסייה במהלך בדיקת אינטגרציה",
            "בבדיקות אלפא",
            "ניתן לקיים כסוי הצהרות מלא וגם כיסוי החלטות מלא עבור ערך יחיד של A",
            "המודולים לא נבדקו מספיק לעומק",
            "תפתח תקלה חדשה בעדיפות גבוהה יותר מהקודמת",
            "ניהול סיכונים ושפיות",
            "במהלך בדיקות ביטא",
            "א' הינו בדיקת מערכת, ב' הינו בדיקת פרוגרסייה, ג' הינו בדיקת רגרסייה, ד' הינו בדיקת קבלה",
            "א' +ג' הינם פיתוח סדרתי. ב'+ד' הינם פיתוח בסבבים",
            "הערך 6=a יתן כסוי החלטות מלא וכסוי הצהרות מלא",
            "בדיקות תחזוקה שוטפות מיומה הראשון של המערכת אצל הלקוחות",
            "המערכת לא מותאמת לסמטארפונים, חלק מהמסך נחתך",
            "לבצע בדיקות רגרסיה מקיפות על המודול ''חישוב סך התשלום'' בתוכנה, לפי עקרון ''צרות באות בצרורות''",
    };
    private String[] ans4 = new String[]{
            "התקלה תסגר",
            "הצוות מתייעץ עם הmaster scrum לגבי פתרון התקלה",
            "התפלגות חומרת התקלות בגרסא זו, לעומת ההתפלגות בגרסא הקודמת",
            "זו בעיה פונקציונלית, שהתגלתה בבדיקת אינטגרציה",
            "להמשיך לבדיקות אינטגרציה לפי עקרון ''גילוי מוקדם''",
            "יש לבצע בדיקת אינטגרציה במהלך בדיקת רגרסייה",
            "בבדיקות אינטגרציה",
            "לא ניתן לקיים כסוי הצהרות מלא ולא כיסוי החלטות מלא, עבור ערך יחיד של A",
            "חוסר תיעוד גרם ל''קצר בתקשורת''",
            "תפתח תקלה חדשה ללא קשר לתקלה הקודמת",
            "בדיקות יחידה וקבלה",
            "במהלך בדיקות קופסא שחורה",
            "א' הינו בדיקת הערכת מומחה, ב' הינו בדיקת פרוגרסיה, ג' הינו בדיקת אינטגרציה, ד' הינו בדיקת מערכת",
            "א' +ד' הינם פיתוח בסבבים. ב'+ג' הינם פיתוח סדרתי",
            "הערך 9=a יתן כסוי החלטות חלקי וכסוי הצהרות מלא",
            "בדיקות שפיות מגוונות בכל רמת בדיקה",
            "גודל הפונט לא ניתן להגדלה",
            "לחזור לבדיקות ברמת בדיקות קודמת, לפי עקרון ''גילוי מוקדם''",
    };
    private int[] answers = new int[]{
            1,
            2,
            2,
            4,
            4,
            3,
            4,
            4,
            2,
            4,
            2,
            3,
            2,
            4,
            4,
            2,
            4,
            3,
    };
    private int[] scores = new int[]{
            10, 10, 10,
            20, 20, 20,
            30, 30, 30,
            10, 10, 10,
            20, 20, 20,
            30, 30, 30,
    };

    private String[] descriptions = new String[] {
            "sem1_y_2022_1",
            "sem1_y_2022_2",
            "sem1_y_2022_3",
            "sem1_y_2022_4",
            "sem1_y_2022_5",
            "sem1_y_2022_6",
            "sem1_y_2022_7",
            "sem1_y_2022_8",
            "sem1_y_2022_9",
            "sem1_y_2022_10",
            "sem1_y_2022_11",
            "sem1_y_2022_12",
            "sem1_y_2022_13",
            "sem1_y_2022_14",

            "sem1_y_2022_16",
            "sem1_y_2022_17",
            "sem1_y_2022_18",
            "sem1_y_2022_19",
            "sem1_y_2022_20",
            "sem1_y_2022_21",
            "sem1_y_2022_22",
            "sem1_y_2022_23",
            "sem1_y_2022_24",

            "sem1_1_2022_1",
            "sem1_1_2022_2",
            "sem1_1_2022_3",
            "sem1_1_2022_4",
            "sem1_1_2022_5",
            "sem1_1_2022_6",
    };

    private int score = 0;
    private int index = 0;
    private int wrong = 0;
    private int life;

    private ArrayList<Question> questions;

    public GameManager(int life) {
        this.life = life;
        this.isLocked = false;
        questions = new ArrayList<>();
        for (int i = 0; i < names.length; i++) {
            Question c = new Question()
                    .setQuestion(names[i])
                    .setScore(scores[i])
                    .setImage(flags[i])
                    .setCorrect(answers[i])
                    .setAns1(ans1[i]).setAns2(ans2[i]).setAns3(ans3[i]).setAns4(ans4[i])
                    .setDescription(descriptions[i]);

            questions.add(c);
        }

    }

    public void lock(){
        this.isLocked = true;
    }
    public void unlock(){
        this.isLocked = false;
    }

    public boolean isLocked(){return this.isLocked;}

    public int getScore() {
        return score;
    }

    public int getCurrentFlag() {
        return flags[index];
    }

    public String getCurrentName() {
        return names[index];
    }

    public int getWrong() {
        return wrong;
    }

    public boolean isGameEnded(){
        return index >= flags.length;
    }

    public boolean isLose(){
        return life == wrong;
    }

    public int checkAnswer(int answer){
        int correct = answers[index];
        if (correct == answer)
            score += scores[index];
        else
            wrong++;

        index++;
        return correct;
    }

    public String getAnswer1() {
        return ans1[index];
    }


    public String getAnswer2() {
        return ans2[index];
    }

    public String getAnswer3() {
        return ans3[index];
    }

    public String getAnswer4() {
        return ans4[index];
    }
}